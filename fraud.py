# -*- coding: utf-8 -*-
"""Fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j1it_2_sVilOHGk8ONg2HfwFcc3hO-XL
"""

import pandas as pd
import numpy as np

df = pd.read_csv("fraud.csv")

df.head(5)

df.tail(5)

df.isna().sum()

null_rows = df[df.isnull().any(axis=1)]
print("Number of rows with null values:", len(null_rows))
print(null_rows)

df = df.dropna()
null_rows = df[df.isnull().any(axis=1)]
print("Number of rows with null values:", len(null_rows))
print(null_rows)

df = df.applymap(lambda x: x.strip("'") if isinstance(x, str) else x)
df

df.drop(['customer','zipcodeOri', 'zipMerchant'], axis=1, inplace=True)

df

df['gender'] = df['gender'].replace("M","Male")
df['gender'] = df['gender'].replace("F","Female")
df['gender'] = df['gender'].replace("U","Unknown")
df['gender'] = df['gender'].replace("E","Enterprise")

df['age'] = df['age'].replace("0", "<= 18")
df['age'] = df['age'].replace("1", "19-25")
df['age'] = df['age'].replace("2", "26-35")
df['age'] = df['age'].replace("3", "36-45")
df['age'] = df['age'].replace("4", "46-55")
df['age'] = df['age'].replace("5", "56-65")
df['age'] = df['age'].replace("6", "> 65")
df['age'] = df['age'].replace("U", "Unknown")

df = pd.get_dummies(df, columns=['age', 'gender', 'category'], drop_first=True)

df[['amount']] = scaler.fit_transform(df[['amount']])

df

X = df.drop(['fraud', 'merchant'], axis=1)
y = df['fraud']

import matplotlib.pyplot as plt
import seaborn as sns
sns.countplot(x=y)
plt.title("Fraud vs Non-Fraud")
plt.show()

sns.histplot(X['amount'], bins=20)
plt.title("Transaction Amount Distribution")
plt.show()

corr = pd.concat([X, y], axis=1).corr()
sns.heatmap(corr[['fraud']].sort_values(by='fraud', ascending=False), annot=True)
plt.title("Fraud Correlation with Features")
plt.show()

fraud_by_step = df.groupby('step')['fraud'].mean()

plt.figure(figsize=(12, 5))
sns.lineplot(data=fraud_by_step)
plt.title("Fraud Rate Over Time (step)")
plt.xlabel("Step (Hour)")
plt.ylabel("Fraud Rate")
plt.grid(True)
plt.show()

df['step'] = df['step'] % 24

df

from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

import joblib
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42)
joblib.dump(X_train.columns.tolist(), "expected_columns.pkl")

df.to_csv('final_data.csv', index=False)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
joblib.dump(model, 'fraud_model.pkl')
joblib.dump(X.columns.tolist(), 'model_features.pkl')

from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
y_pred = model.predict(X_test)
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("ROC AUC Score:", roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, y_train)
preds_lr = lr.predict(X_test)
probs_lr = lr.predict_proba(X_test)[:, 1]

print("ðŸ”¹ Logistic Regression")
print(classification_report(y_test, preds_lr))
print("ROC AUC:", roc_auc_score(y_test, probs_lr))

from sklearn.ensemble import GradientBoostingClassifier

gb = GradientBoostingClassifier()
gb.fit(X_train, y_train)
preds_gb = gb.predict(X_test)
probs_gb = gb.predict_proba(X_test)[:, 1]

print("ðŸ”¹ Gradient Boosting")
print(classification_report(y_test, preds_gb))
print("ROC AUC:", roc_auc_score(y_test, probs_gb))

importances = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)
importances.head(10).plot(kind='barh')
plt.title("Top Important Features")
plt.gca().invert_yaxis()
plt.show()

importances = pd.Series(gb.feature_importances_, index=X.columns).sort_values(ascending=False)
importances.head(10).plot(kind='barh')
plt.title("Top Important Features")
plt.gca().invert_yaxis()
plt.show()

import joblib
joblib.dump(model, 'fraud_model.pkl')

joblib.dump(scaler, 'scaler.pkl')

df.head()

!pip install ipywidgets

!jupyter nbextension enable --py widgetsnbextension

import ipywidgets as widgets
from IPython.display import display
import pandas as pd
import joblib

model = joblib.load("fraud_model.pkl")
feature_names = joblib.load("model_features.pkl")
amount_widget = widgets.FloatText(description='Amount:', value=100.0)
age_widget = widgets.Dropdown(options=['<= 18', '19-25', '26-35', '36-45', '46-55', '56-65', '> 65', 'Unknown'], description='Age:')
gender_widget = widgets.Dropdown(options=['Male', 'Female', 'Unknown', 'Enterprise'], description='Gender:')
category_widget = widgets.Dropdown(options=[
    'es_transportation', 'es_health', 'es_others', 'es_food', 'es_hotelservices',
    'es_barsandrestaurants', 'es_tech', 'es_wellnessandbeauty'
], description='Category:')
step_widget = widgets.IntText(description='Step:', value=24)

predict_button = widgets.Button(description="Predict Fraud", button_style='primary')
output = widgets.Output()

def on_predict_clicked(b):
    input_data = dict.fromkeys(feature_names, 0)
    input_data['amount'] = amount_widget.value

    if f"age_{age_widget.value}" in input_data:
        input_data[f"age_{age_widget.value}"] = 1
    if f"gender_{gender_widget.value}" in input_data:
        input_data[f"gender_{gender_widget.value}"] = 1
    if f"category_{category_widget.value}" in input_data:
        input_data[f"category_{category_widget.value}"] = 1
    if f"step_{step_widget.value}" in input_data:
        input_data[f"step_{step_widget.value}"] = 1

    input_df = pd.DataFrame([input_data])
    prediction = model.predict(input_df)[0]
    proba = model.predict_proba(input_df)[0][1]

    output.clear_output()
    with output:
        if prediction == 1:
            print(f"Fraud Detected! (Confidence: {proba:.2%})")
        else:
            print(f"Benign Transaction. (Confidence: {1 - proba:.2%})")

predict_button.on_click(on_predict_clicked)

display(widgets.VBox([
    amount_widget,
    age_widget,
    gender_widget,
    category_widget,
    step_widget,
    predict_button,
    output
]))